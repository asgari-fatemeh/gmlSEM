!Maybe another comment
#Defining variable label
#Either fw or label can be referenced in the formula
group: gender(old=1,young=2)

fw as forweekend
fz as  "forever   zero"
fww as   vary at level

#This is not and ambiguty for Parser
as as assure
assure as as as    # assure <> "as as"
assure as as       # asure <> as
as =~ x1 + x2 

b1,...,b6 as beta1,...,beta6
y1,as,y2 as yyy1,yyy2,yyy3
z1,...,z10 as (y1=0),...,(y10=0)

#Default families
family: y binomial(link="logit")
family: y1,...,y10 binomial(link="logit") copula(type="gaussian")

#notation to support vector-valued distributions
#Potential syntax
family: (x1.1,x1.2,x1.3),...,(x9.1,x9.2,x9.3) ordered()
family: (x1.1,x1.2,x1.3) for y1,...,(x9.1,x9.2,x9.3) for y9 tobit(type=4)
family: (x1.1,x1.2,x1.3) for (y11,y12),...,(x9.1,x9.2,x9.3) for (y91,y92) tobit(type=4)

family: z1,...,z5 binomial(link="logit")
family: z6,...,z10 binomial(link="logit")
family: z1,...,z10 copula(type="gaussian")

family: fb zoib(link="logit")      #Produce a warning
family: fz zib(link=c("probit","logit"))
family: (y11,y12),...,(y51,y52) tobit(type=3)

#also
family: y1,...,y10
        z1,...,z9
        binomial()
        copula()



#Hierarchical cluster/MultiLevel SEM
level: team(teamID),class(classID) within school(schoolID) within city,ethnic within prov

level: class within school within city

level: school(schoolID)
level: class (classID) within school (schoolID)

# measurement model
fb,z         vary at level school
fw           varies at level class
y1,y2,y3     vary at level class
y1, ... ,y13 vary at level class


ind60 =~ x1 + x2 + x3 
dem60 =~ y1 + 1*y2 + y3 + y4       
dem60 =~ y1 + ... + y4           
dem65 =~ y5 + y6 + y7 + y8

# regressions
dem60 ~ center(ind60) + beta1*s(x1,bs=NULL)
dem60 ~ center(ind60) + ind60
dem65 ~ ind60 + dem60 + (b11*1 [as cc ]+ b1x* x[ as  cd]|class)

dem60 ~ beta1*center(x1)+...+beta5*center(x5)
dem65 ~ beta1*center(x1)+beta1*center(x2)+...+beta1*center(x5)
ind60 ~ beta1*center(x1)+beta2*center(x2)+...+beta5*center(x5)

#Multiple ellipses in the regression block
y ~ x1+x3+...+x9+y1+...+y9+
    (x1+...+x9|class)+(a11*x1[as rx1]+...+a19*x9[as rx9]|class)

#Heteroskedasticity
heter: y ~ x1 + x2

# residual (co)variances
y1 ~~ y5
y2 ~~ y4 + y6
y3 ~~ y7
y4 ~~ y8
y6 ~~ y8
dem65 ~~ 1*dem65 #fix variance eq. 1

# intercepts
y1 ~ 1
f1 ~ 1


# model with labeled parameters
y ~ b1*x1 + b2*x2 + b3*x3
z ~ b1*x1 + ... + b5*x5

# constraints
b1 == (b2 + b3)^2
b1 > exp(b2 + b3 + ... + b9)

## Define and monitor new params
# indirect effect (a*b)
ab := a*b
# total effect
total := c + (a*b)


##Multiple Group, adding argument group = "school", group.equal = c("loadings", "intercepts"), 
## except group.partial = c("visual=~x2", "x7~1"))
visual =~ x1 + 0.5*x2 + c(0.6, 0.8)*x3 + c(0.1,NA)*x4
textual =~ x4 + start(c(1.2, 0.6))*x5 + c(a1, a2)*x6
speed =~ x7 + x8 + x9 


#size: is a block used for simulation purpose only
#Syntax=> size: param level (in level param  | (per|each|in each) level)
size: 10 school
      3  class per     school
      3  team  per     school
size: A student per   class 
      B student per   team
size: 100  student


### Current implemented blocks are
#level, group, heter, family, rep, size
# At most one call for group and rep block are accepted in a model
# rep and size blocks are multiline blocks
### Do we need to make other blocks multiline as well?

### repeated measure syntax
##rep|repeated|repeated measures or any abbreviations is acceptable
#rep: time within subject
#rep: x1,...,x10 for x(t=1:10)
#     y1,...,y10 for y(t)
##You can use naming conventions to give a name to the time index, and to use it later in the models
#rep: x1,...,x10 for x(t)
#     y1,...,y10 for y(s)
##or give a same name, if time indices coincides
#rep: x1,...,x10 for x(t)
#     y1,...,y10 for y(t)
     
## you can use the lags on the rhs of a measurement or regression model 
## with x(-1) or x[-1] or lag(x,1)
## x(0) stands for baseline
## the order of lags are expected to be euqal and less than zero. 
## Let us know if you think we need to leave out this constraint.

## in a family block
# family: x normal() copula()
## is equivalent to
# family: x1,...,x10 normal() copula()

### when a (time,subject) is given in rep: block, all the observed and latent
## variables will be indexed with a proper suffix 
## and can be referenced the same in model

## the unique values in the time will be sorted and will be matched with the 
## increaseing sequence starting from 1. Thus for a variable named 'x',
## x(-1) refers to the value of X in the previous time, and X(0) is again the baseline measurements.

### using repeated mesured variables as responses either on the lhs of a regression model or on the rhs of a factor model have consequences

## Example: Let say we have 10 measurements for x and y and z as defined in the last rep block, then
# y ~ x + z
## is equivalent to
# y1 ~ a*x1 + b*z
# y2 ~ a*x2 + b*z
# ...
# y10 ~ a*x10 + b*z
## and
# eta =~ x + y + z
## is equivalent to
 
# eta1 =~ a*x1 + b*y1 + c*z1
# eta1 =~ a*x2 + b*y2 + c*z2
# ...
# eta1 =~ a*x10 + b*y10 + c*z10

### Note that the model y ~ x + z produce an error if x and y have not the same length or the time index are named differently. 
## The symbol 't' will automatically will assign as the time index name if 't' is not defined in data, and model and the length of all repeated statements are equal.

### The number of equations depends on the order of lags used in the models,
## For example, 
# y ~ x + x(-1) +x(-2) + z
## is equivalent to the the system of the follwoing 8 regression models
# y3 ~ a*x3 + b*x2 +c*x1 + d*z3
# y4 ~ a*x4 + b*x3 +c*x2 + d*z4
# ...
# y10 ~ a*x10 + b*x9 +c*x8 + d*z10
## and 
# y ~ x + x(-1) +x(-2) + x(0) + z  !x(0) is the baseline
## is equivalent to the the system of the follwoing 7 regression models
# y4 ~ a*x4 + b*x3 +c*x2 + d*x1 + e*z4
# y5 ~ a*x5 + b*x4 +c*x3 + d*x1 + e*z4
# ...
# y10 ~ a*x10 + b*x9 +c*x8 + d*x1 + e*z10

### The same holds for factor models. You can use positive lags in the models for better read. However the gmlSEM will shift the lags so that
## y(1) ~ x + x(0) + z
###is equivalent to 
## y ~ x(-1) + x(0) + z(-1)


### We can use this approach to write growth curve models:
## a growth curve model with three measurements
# slope =~ 0*x1 + 1*x2 + 2*x3
# inte  =~ 1*x1 + 1*x2 + 1*x3
## is equivalent to
# rep: x1,x2,x3 for x(t)
# x ~ int + slope*(t-1)
#family: int slope normal()  !Not necessary, since  a normal distribution is assumed by default for variables for which the family is not defined. It will be noticed in an accumulated notice statement.
 
## or 
#rep: x1,x2,x3,x4 for x(t)
#x ~ int + slope1*t + slope*(t^2)

## or 
#rep: x1,...,x8 for x(t)
#x ~ s(t)  #smooth term as in functional regression

#Ar(q)
# y ~ y(-1) + y(-2) + x
# y ~ ar(2) + x


# The covariance structure 
# Conidiotnal covariance structure can be defined by a set of predifined cov. str. models, such as 
# y ~~ MAH(2)

